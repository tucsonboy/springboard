{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "93f8fbe4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "# suppress future warnings\n",
    "import warnings\n",
    "warnings.simplefilter(action='ignore', category=FutureWarning)\n",
    "warnings.simplefilter(action='ignore', category=UserWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7c41f027",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(r'C:\\data\\mia_data2.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dd32b1c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0.1', 'Unnamed: 0', 'YEAR', 'MONTH', 'DAY_OF_WEEK',\n",
       "       'OP_CARRIER_FL_NUM', 'ORIGIN', 'DEST', 'CRS_DEP_TIME', 'DEP_TIME',\n",
       "       'DEP_DELAY', 'DEP_DELAY_NEW', 'CRS_ARR_TIME', 'ARR_TIME', 'ARR_DELAY',\n",
       "       'ARR_DELAY_NEW', 'CANCELLED', 'CANCELLATION_CODE', 'DIVERTED',\n",
       "       'CRS_ELAPSED_TIME', 'ACTUAL_ELAPSED_TIME', 'CARRIER_DELAY',\n",
       "       'WEATHER_DELAY', 'NAS_DELAY', 'SECURITY_DELAY', 'LATE_AIRCRAFT_DELAY',\n",
       "       'WHY_DELAY', 'DAY', 'DATE'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "67c416e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Deleting all flights were the flight was diverted\n",
    "df = df[df.DIVERTED ==0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cf9f946b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Deleting all rows where the flight was cancelled\n",
    "df = df[df.CANCELLED == 0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "654f24a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime as datetime\n",
    "#_________________________________________________________\n",
    "# Function that convert the 'HHMM' string to datetime.time\n",
    "def format_heure(chaine):\n",
    "    if pd.isnull(chaine):\n",
    "        return np.nan\n",
    "    else:\n",
    "        if chaine == 2400: chaine = 0\n",
    "        chaine = \"{0:04d}\".format(int(chaine))\n",
    "        heure = datetime.time(int(chaine[0:2]), int(chaine[2:4]))\n",
    "        return heure\n",
    "#_____________________________________________________________________\n",
    "# Function that combines a date and time to produce a datetime.datetime\n",
    "def combine_date_heure(x):\n",
    "    if pd.isnull(x[0]) or pd.isnull(x[1]):\n",
    "        return np.nan\n",
    "    else:\n",
    "        return datetime.datetime.combine(x[0],x[1])\n",
    "#_______________________________________________________________________________\n",
    "# Function that combine two columns of the dataframe to create a datetime format\n",
    "def create_flight_time(df, col):    \n",
    "    liste = []\n",
    "    for index, cols in df[['DATE', col]].iterrows():    \n",
    "        if pd.isnull(cols[1]):\n",
    "            liste.append(np.nan)\n",
    "        elif float(cols[1]) == 2400:\n",
    "            cols[0] += datetime.timedelta(days=1)\n",
    "            cols[1] = datetime.time(0,0)\n",
    "            liste.append(combine_date_heure(cols))\n",
    "        else:\n",
    "            cols[1] = format_heure(cols[1])\n",
    "            liste.append(combine_date_heure(cols))\n",
    "    return pd.Series(liste)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d10c2adf",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['DEPARTURE_TIME'] = df['DEP_TIME'].apply(format_heure);\n",
    "df['ARRIVAL_TIME'] = df['ARR_TIME'].apply(format_heure)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c5e6462d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df[['DAY', 'MONTH', 'YEAR']] = df[['DAY', 'MONTH', 'YEAR']].values.astype('str')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "eef13796",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['DATE'] = df['MONTH']+'-'+df['DAY']+'-'+df['YEAR']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "37ea9694",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import date, time\n",
    "df['DEPARTURE'] = pd.to_datetime(df['DATE'].astype(str)+' '+ df['DEPARTURE_TIME'].astype(str))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "59339b84",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.ACTUAL_ELAPSED_TIME= df.ACTUAL_ELAPSED_TIME.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "18c3159d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.series.Series'>\n",
      "Int64Index: 659119 entries, 0 to 736651\n",
      "Series name: ACTUAL_ELAPSED_TIME\n",
      "Non-Null Count   Dtype\n",
      "--------------   -----\n",
      "659119 non-null  int32\n",
      "dtypes: int32(1)\n",
      "memory usage: 7.5 MB\n"
     ]
    }
   ],
   "source": [
    "df.ACTUAL_ELAPSED_TIME.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "03ffe081",
   "metadata": {},
   "outputs": [],
   "source": [
    "# I want to create dummy values based on the why delay column\n",
    "dummy = pd.get_dummies(df['WHY_DELAY'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d46b76c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>carrier</th>\n",
       "      <th>late aircraft</th>\n",
       "      <th>nas</th>\n",
       "      <th>security</th>\n",
       "      <th>weather</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736647</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736648</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736649</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736650</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736651</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>659119 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        0  carrier  late aircraft  nas  security  weather\n",
       "0       1        0              0    0         0        0\n",
       "1       1        0              0    0         0        0\n",
       "2       1        0              0    0         0        0\n",
       "3       1        0              0    0         0        0\n",
       "4       1        0              0    0         0        0\n",
       "...    ..      ...            ...  ...       ...      ...\n",
       "736647  1        0              0    0         0        0\n",
       "736648  1        0              0    0         0        0\n",
       "736649  1        0              0    0         0        0\n",
       "736650  0        0              0    1         0        0\n",
       "736651  0        1              0    0         0        0\n",
       "\n",
       "[659119 rows x 6 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dummy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "33861e41",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0.1', 'Unnamed: 0', 'YEAR', 'MONTH', 'DAY_OF_WEEK',\n",
       "       'OP_CARRIER_FL_NUM', 'ORIGIN', 'DEST', 'CRS_DEP_TIME', 'DEP_TIME',\n",
       "       'DEP_DELAY', 'DEP_DELAY_NEW', 'CRS_ARR_TIME', 'ARR_TIME', 'ARR_DELAY',\n",
       "       'ARR_DELAY_NEW', 'CANCELLED', 'CANCELLATION_CODE', 'DIVERTED',\n",
       "       'CRS_ELAPSED_TIME', 'ACTUAL_ELAPSED_TIME', 'CARRIER_DELAY',\n",
       "       'WEATHER_DELAY', 'NAS_DELAY', 'SECURITY_DELAY', 'LATE_AIRCRAFT_DELAY',\n",
       "       'WHY_DELAY', 'DAY', 'DATE', 'DEPARTURE_TIME', 'ARRIVAL_TIME',\n",
       "       'DEPARTURE', '0', 'carrier', 'late aircraft', 'nas', 'security',\n",
       "       'weather'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.concat([df, dummy], axis = 1)\n",
    "df.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e79427b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns = ['Unnamed: 0.1', 'Unnamed: 0', 'OP_CARRIER_FL_NUM', 'CANCELLATION_CODE', 'DIVERTED',  'CARRIER_DELAY','WEATHER_DELAY', 'NAS_DELAY', 'SECURITY_DELAY', 'LATE_AIRCRAFT_DELAY', 'DATE', 'WHY_DELAY', 'carrier', 'late aircraft', 'nas','security', 'OP_CARRIER_FL_NUM', 'CRS_ARR_TIME', 'ARR_TIME', 'CRS_DEP_TIME', \"DEP_TIME\", 'CANCELLED']  , inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "51142413",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df['ARRIVAL'] = df['DEPARTURE'] + pd.to_timedelta(df['ACTUAL_ELAPSED_TIME'], unit ='m')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "69488055",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 659119 entries, 0 to 736651\n",
      "Data columns (total 18 columns):\n",
      " #   Column               Non-Null Count   Dtype         \n",
      "---  ------               --------------   -----         \n",
      " 0   YEAR                 659119 non-null  object        \n",
      " 1   MONTH                659119 non-null  object        \n",
      " 2   DAY_OF_WEEK          659119 non-null  float64       \n",
      " 3   ORIGIN               659119 non-null  object        \n",
      " 4   DEST                 659119 non-null  object        \n",
      " 5   DEP_DELAY            659119 non-null  float64       \n",
      " 6   DEP_DELAY_NEW        659119 non-null  float64       \n",
      " 7   ARR_DELAY            659119 non-null  float64       \n",
      " 8   ARR_DELAY_NEW        659119 non-null  float64       \n",
      " 9   CRS_ELAPSED_TIME     659119 non-null  float64       \n",
      " 10  ACTUAL_ELAPSED_TIME  659119 non-null  int32         \n",
      " 11  DAY                  659119 non-null  object        \n",
      " 12  DEPARTURE_TIME       659119 non-null  object        \n",
      " 13  ARRIVAL_TIME         659119 non-null  object        \n",
      " 14  DEPARTURE            659119 non-null  datetime64[ns]\n",
      " 15  0                    659119 non-null  uint8         \n",
      " 16  weather              659119 non-null  uint8         \n",
      " 17  ARRIVAL              659119 non-null  datetime64[ns]\n",
      "dtypes: datetime64[ns](2), float64(6), int32(1), object(7), uint8(2)\n",
      "memory usage: 84.2+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "aa270f06",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns = ['YEAR','MONTH', 'DAY', 'DEPARTURE_TIME', 'ARRIVAL_TIME'], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "817755f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['ARRIVAL'] = df['ARRIVAL'].apply(lambda x: x.toordinal())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ee4a217c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['DEPARTURE'] = df['DEPARTURE'].apply(lambda x:x.toordinal())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "75a191ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 659119 entries, 0 to 736651\n",
      "Data columns (total 13 columns):\n",
      " #   Column               Non-Null Count   Dtype  \n",
      "---  ------               --------------   -----  \n",
      " 0   DAY_OF_WEEK          659119 non-null  float64\n",
      " 1   ORIGIN               659119 non-null  object \n",
      " 2   DEST                 659119 non-null  object \n",
      " 3   DEP_DELAY            659119 non-null  float64\n",
      " 4   DEP_DELAY_NEW        659119 non-null  float64\n",
      " 5   ARR_DELAY            659119 non-null  float64\n",
      " 6   ARR_DELAY_NEW        659119 non-null  float64\n",
      " 7   CRS_ELAPSED_TIME     659119 non-null  float64\n",
      " 8   ACTUAL_ELAPSED_TIME  659119 non-null  int32  \n",
      " 9   DEPARTURE            659119 non-null  int64  \n",
      " 10  0                    659119 non-null  uint8  \n",
      " 11  weather              659119 non-null  uint8  \n",
      " 12  ARRIVAL              659119 non-null  int64  \n",
      "dtypes: float64(6), int32(1), int64(2), object(2), uint8(2)\n",
      "memory usage: 59.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8255b78c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# I need to create two data frames to work on one that is about departures from MIA and the \n",
    "#other one that deals with arrivals.\n",
    "\n",
    "df_arr = df[df.DEST == 'MIA']\n",
    "df_dep = df[df.ORIGIN == 'MIA']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e5ff3d0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:/Users/FERNAN~1/AppData/Local/Temp/xpython_6252/3235558468.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_arr.drop(columns = ['DEST', 'DEP_DELAY_NEW', 'DEPARTURE'], inplace = True)\n"
     ]
    }
   ],
   "source": [
    "# In df_ arr, the DEST value is the same for all flights, I will be eliminating that column as well as everything that has to \n",
    "# deal with departures.\n",
    "\n",
    "df_arr.drop(columns = ['DEST', 'DEP_DELAY_NEW', 'DEPARTURE'], inplace = True)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "89e969d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting Origin to numerical data by using get_dummies.\n",
    "temp = pd.get_dummies(df_arr.ORIGIN, prefix = 'ORIGIN')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e3907353",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ORIGIN_ATL</th>\n",
       "      <th>ORIGIN_AUS</th>\n",
       "      <th>ORIGIN_BDL</th>\n",
       "      <th>ORIGIN_BGR</th>\n",
       "      <th>ORIGIN_BHM</th>\n",
       "      <th>ORIGIN_BNA</th>\n",
       "      <th>ORIGIN_BOS</th>\n",
       "      <th>ORIGIN_BWI</th>\n",
       "      <th>ORIGIN_CAE</th>\n",
       "      <th>ORIGIN_CHS</th>\n",
       "      <th>...</th>\n",
       "      <th>ORIGIN_SLC</th>\n",
       "      <th>ORIGIN_STL</th>\n",
       "      <th>ORIGIN_STT</th>\n",
       "      <th>ORIGIN_STX</th>\n",
       "      <th>ORIGIN_TLH</th>\n",
       "      <th>ORIGIN_TPA</th>\n",
       "      <th>ORIGIN_TTN</th>\n",
       "      <th>ORIGIN_TUL</th>\n",
       "      <th>ORIGIN_TYS</th>\n",
       "      <th>ORIGIN_XNA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736642</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736644</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736645</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736647</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736648</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>329362 rows Ã— 75 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ORIGIN_ATL  ORIGIN_AUS  ORIGIN_BDL  ORIGIN_BGR  ORIGIN_BHM  \\\n",
       "0                0           0           0           0           0   \n",
       "1                0           0           0           0           0   \n",
       "2                0           0           0           0           0   \n",
       "3                0           0           0           0           0   \n",
       "4                0           0           0           0           0   \n",
       "...            ...         ...         ...         ...         ...   \n",
       "736642           0           0           0           0           0   \n",
       "736644           0           0           0           0           0   \n",
       "736645           0           0           0           0           0   \n",
       "736647           0           0           0           0           0   \n",
       "736648           1           0           0           0           0   \n",
       "\n",
       "        ORIGIN_BNA  ORIGIN_BOS  ORIGIN_BWI  ORIGIN_CAE  ORIGIN_CHS  ...  \\\n",
       "0                0           0           0           0           0  ...   \n",
       "1                0           0           0           0           0  ...   \n",
       "2                0           0           0           0           0  ...   \n",
       "3                0           0           0           0           0  ...   \n",
       "4                0           0           0           0           0  ...   \n",
       "...            ...         ...         ...         ...         ...  ...   \n",
       "736642           0           0           0           0           0  ...   \n",
       "736644           0           1           0           0           0  ...   \n",
       "736645           0           0           0           0           0  ...   \n",
       "736647           0           0           0           0           0  ...   \n",
       "736648           0           0           0           0           0  ...   \n",
       "\n",
       "        ORIGIN_SLC  ORIGIN_STL  ORIGIN_STT  ORIGIN_STX  ORIGIN_TLH  \\\n",
       "0                0           0           1           0           0   \n",
       "1                0           0           1           0           0   \n",
       "2                0           0           1           0           0   \n",
       "3                0           0           1           0           0   \n",
       "4                0           0           1           0           0   \n",
       "...            ...         ...         ...         ...         ...   \n",
       "736642           0           0           0           0           0   \n",
       "736644           0           0           0           0           0   \n",
       "736645           0           0           0           0           0   \n",
       "736647           0           0           0           0           0   \n",
       "736648           0           0           0           0           0   \n",
       "\n",
       "        ORIGIN_TPA  ORIGIN_TTN  ORIGIN_TUL  ORIGIN_TYS  ORIGIN_XNA  \n",
       "0                0           0           0           0           0  \n",
       "1                0           0           0           0           0  \n",
       "2                0           0           0           0           0  \n",
       "3                0           0           0           0           0  \n",
       "4                0           0           0           0           0  \n",
       "...            ...         ...         ...         ...         ...  \n",
       "736642           0           0           0           0           0  \n",
       "736644           0           0           0           0           0  \n",
       "736645           0           0           0           0           0  \n",
       "736647           0           0           0           0           0  \n",
       "736648           0           0           0           0           0  \n",
       "\n",
       "[329362 rows x 75 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "40e1cb44",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Join the two dataframes\n",
    "df_arr = pd.concat([df_arr, temp], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6b06d3d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_arr = df_arr['weather']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "abecc6d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_arr.drop(columns = ['weather', 'ORIGIN'], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "10cd6038",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DAY_OF_WEEK</th>\n",
       "      <th>DEP_DELAY</th>\n",
       "      <th>ARR_DELAY</th>\n",
       "      <th>ARR_DELAY_NEW</th>\n",
       "      <th>CRS_ELAPSED_TIME</th>\n",
       "      <th>ACTUAL_ELAPSED_TIME</th>\n",
       "      <th>0</th>\n",
       "      <th>ARRIVAL</th>\n",
       "      <th>ORIGIN_ATL</th>\n",
       "      <th>ORIGIN_AUS</th>\n",
       "      <th>...</th>\n",
       "      <th>ORIGIN_SLC</th>\n",
       "      <th>ORIGIN_STL</th>\n",
       "      <th>ORIGIN_STT</th>\n",
       "      <th>ORIGIN_STX</th>\n",
       "      <th>ORIGIN_TLH</th>\n",
       "      <th>ORIGIN_TPA</th>\n",
       "      <th>ORIGIN_TTN</th>\n",
       "      <th>ORIGIN_TUL</th>\n",
       "      <th>ORIGIN_TYS</th>\n",
       "      <th>ORIGIN_XNA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6.0</td>\n",
       "      <td>-16.0</td>\n",
       "      <td>-5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>196</td>\n",
       "      <td>1</td>\n",
       "      <td>733893</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>170</td>\n",
       "      <td>1</td>\n",
       "      <td>733894</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>176</td>\n",
       "      <td>1</td>\n",
       "      <td>733895</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>-11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>176</td>\n",
       "      <td>1</td>\n",
       "      <td>733896</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>185.0</td>\n",
       "      <td>171</td>\n",
       "      <td>1</td>\n",
       "      <td>733897</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736642</th>\n",
       "      <td>4.0</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>181.0</td>\n",
       "      <td>182</td>\n",
       "      <td>1</td>\n",
       "      <td>738049</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736644</th>\n",
       "      <td>4.0</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>-15.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>210.0</td>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>738049</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736645</th>\n",
       "      <td>4.0</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>173.0</td>\n",
       "      <td>173</td>\n",
       "      <td>1</td>\n",
       "      <td>738049</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736647</th>\n",
       "      <td>4.0</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>171.0</td>\n",
       "      <td>168</td>\n",
       "      <td>1</td>\n",
       "      <td>738049</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736648</th>\n",
       "      <td>4.0</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>103</td>\n",
       "      <td>1</td>\n",
       "      <td>738050</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>329362 rows Ã— 83 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        DAY_OF_WEEK  DEP_DELAY  ARR_DELAY  ARR_DELAY_NEW  CRS_ELAPSED_TIME  \\\n",
       "0               6.0      -16.0       -5.0            0.0             185.0   \n",
       "1               7.0       15.0        0.0            0.0             185.0   \n",
       "2               1.0       15.0        6.0            6.0             185.0   \n",
       "3               2.0       -2.0      -11.0            0.0             185.0   \n",
       "4               3.0       22.0        8.0            8.0             185.0   \n",
       "...             ...        ...        ...            ...               ...   \n",
       "736642          4.0       -8.0       -7.0            0.0             181.0   \n",
       "736644          4.0       -3.0      -15.0            0.0             210.0   \n",
       "736645          4.0       -3.0       -3.0            0.0             173.0   \n",
       "736647          4.0       -4.0       -7.0            0.0             171.0   \n",
       "736648          4.0       -3.0       -7.0            0.0             107.0   \n",
       "\n",
       "        ACTUAL_ELAPSED_TIME  0  ARRIVAL  ORIGIN_ATL  ORIGIN_AUS  ...  \\\n",
       "0                       196  1   733893           0           0  ...   \n",
       "1                       170  1   733894           0           0  ...   \n",
       "2                       176  1   733895           0           0  ...   \n",
       "3                       176  1   733896           0           0  ...   \n",
       "4                       171  1   733897           0           0  ...   \n",
       "...                     ... ..      ...         ...         ...  ...   \n",
       "736642                  182  1   738049           0           0  ...   \n",
       "736644                  198  1   738049           0           0  ...   \n",
       "736645                  173  1   738049           0           0  ...   \n",
       "736647                  168  1   738049           0           0  ...   \n",
       "736648                  103  1   738050           1           0  ...   \n",
       "\n",
       "        ORIGIN_SLC  ORIGIN_STL  ORIGIN_STT  ORIGIN_STX  ORIGIN_TLH  \\\n",
       "0                0           0           1           0           0   \n",
       "1                0           0           1           0           0   \n",
       "2                0           0           1           0           0   \n",
       "3                0           0           1           0           0   \n",
       "4                0           0           1           0           0   \n",
       "...            ...         ...         ...         ...         ...   \n",
       "736642           0           0           0           0           0   \n",
       "736644           0           0           0           0           0   \n",
       "736645           0           0           0           0           0   \n",
       "736647           0           0           0           0           0   \n",
       "736648           0           0           0           0           0   \n",
       "\n",
       "        ORIGIN_TPA  ORIGIN_TTN  ORIGIN_TUL  ORIGIN_TYS  ORIGIN_XNA  \n",
       "0                0           0           0           0           0  \n",
       "1                0           0           0           0           0  \n",
       "2                0           0           0           0           0  \n",
       "3                0           0           0           0           0  \n",
       "4                0           0           0           0           0  \n",
       "...            ...         ...         ...         ...         ...  \n",
       "736642           0           0           0           0           0  \n",
       "736644           0           0           0           0           0  \n",
       "736645           0           0           0           0           0  \n",
       "736647           0           0           0           0           0  \n",
       "736648           0           0           0           0           0  \n",
       "\n",
       "[329362 rows x 83 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_arr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "531c9821",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_arr_train, X_arr_test, y_arr_train, y_arr_test = train_test_split(df_arr, y_arr, test_size = .33, random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4533fac5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:/Users/FERNAN~1/AppData/Local/Temp/xpython_6252/2599234287.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_dep.drop(columns = ['ORIGIN', 'ARR_DELAY', 'ARR_DELAY_NEW', 'ARRIVAL'], inplace = True)\n"
     ]
    }
   ],
   "source": [
    "#Going to do the same things to df_dep that I just did with df_arr\n",
    "df_dep.drop(columns = ['ORIGIN', 'ARR_DELAY', 'ARR_DELAY_NEW', 'ARRIVAL'], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "bb97ee14",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting DEST to numerical data by using get_dummies.\n",
    "temp = pd.get_dummies(df_dep.DEST, prefix = 'ORIGIN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f4baa2d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ORIGIN_ATL</th>\n",
       "      <th>ORIGIN_AUS</th>\n",
       "      <th>ORIGIN_BDL</th>\n",
       "      <th>ORIGIN_BGR</th>\n",
       "      <th>ORIGIN_BHM</th>\n",
       "      <th>ORIGIN_BNA</th>\n",
       "      <th>ORIGIN_BOS</th>\n",
       "      <th>ORIGIN_BWI</th>\n",
       "      <th>ORIGIN_CAE</th>\n",
       "      <th>ORIGIN_CHS</th>\n",
       "      <th>...</th>\n",
       "      <th>ORIGIN_SLC</th>\n",
       "      <th>ORIGIN_STL</th>\n",
       "      <th>ORIGIN_STT</th>\n",
       "      <th>ORIGIN_STX</th>\n",
       "      <th>ORIGIN_TLH</th>\n",
       "      <th>ORIGIN_TPA</th>\n",
       "      <th>ORIGIN_TTN</th>\n",
       "      <th>ORIGIN_TUL</th>\n",
       "      <th>ORIGIN_TYS</th>\n",
       "      <th>ORIGIN_XNA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736643</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736646</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736649</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736650</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736651</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>329757 rows Ã— 77 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        ORIGIN_ATL  ORIGIN_AUS  ORIGIN_BDL  ORIGIN_BGR  ORIGIN_BHM  \\\n",
       "44               0           0           0           0           0   \n",
       "45               0           0           0           0           0   \n",
       "46               0           0           0           0           0   \n",
       "47               0           0           0           0           0   \n",
       "48               0           0           0           0           0   \n",
       "...            ...         ...         ...         ...         ...   \n",
       "736643           0           0           0           0           0   \n",
       "736646           0           0           0           0           0   \n",
       "736649           0           0           0           0           0   \n",
       "736650           1           0           0           0           0   \n",
       "736651           1           0           0           0           0   \n",
       "\n",
       "        ORIGIN_BNA  ORIGIN_BOS  ORIGIN_BWI  ORIGIN_CAE  ORIGIN_CHS  ...  \\\n",
       "44               0           0           0           0           0  ...   \n",
       "45               0           0           0           0           0  ...   \n",
       "46               0           0           0           0           0  ...   \n",
       "47               0           0           0           0           0  ...   \n",
       "48               0           0           0           0           0  ...   \n",
       "...            ...         ...         ...         ...         ...  ...   \n",
       "736643           0           0           0           0           0  ...   \n",
       "736646           0           0           0           0           0  ...   \n",
       "736649           0           0           0           0           0  ...   \n",
       "736650           0           0           0           0           0  ...   \n",
       "736651           0           0           0           0           0  ...   \n",
       "\n",
       "        ORIGIN_SLC  ORIGIN_STL  ORIGIN_STT  ORIGIN_STX  ORIGIN_TLH  \\\n",
       "44               0           0           0           0           0   \n",
       "45               0           0           0           0           0   \n",
       "46               0           0           0           0           0   \n",
       "47               0           0           0           0           0   \n",
       "48               0           0           0           0           0   \n",
       "...            ...         ...         ...         ...         ...   \n",
       "736643           0           0           0           0           0   \n",
       "736646           0           0           0           0           0   \n",
       "736649           0           0           0           0           0   \n",
       "736650           0           0           0           0           0   \n",
       "736651           0           0           0           0           0   \n",
       "\n",
       "        ORIGIN_TPA  ORIGIN_TTN  ORIGIN_TUL  ORIGIN_TYS  ORIGIN_XNA  \n",
       "44               0           0           0           0           0  \n",
       "45               0           0           0           0           0  \n",
       "46               0           0           0           0           0  \n",
       "47               0           0           0           0           0  \n",
       "48               0           0           0           0           0  \n",
       "...            ...         ...         ...         ...         ...  \n",
       "736643           0           0           0           0           0  \n",
       "736646           0           0           0           0           0  \n",
       "736649           0           0           0           0           0  \n",
       "736650           0           0           0           0           0  \n",
       "736651           0           0           0           0           0  \n",
       "\n",
       "[329757 rows x 77 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5925d68c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Join the two dataframes\n",
    "df_dep = pd.concat([df_dep, temp], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f9d6553c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_dep.to_csv('C:\\data\\departure.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "363e3f2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_arr.to_csv(r'C:\\data\\arrival.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "418c04cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_dep = df_dep['weather']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "04b8b2ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_dep.drop(columns = ['weather', 'DEST'], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "3ceac79b",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_dep_train, X_dep_test, y_dep_train, y_dep_test = train_test_split(df_dep, y_dep, test_size = .33, random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "42345d70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    166834\n",
       "0     54103\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The data is not balanced\n",
    "X_dep_train['0'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "1c529a8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    105020\n",
       "1      3800\n",
       "Name: weather, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_dep_test.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "d8788adc",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from imblearn.over_sampling import SMOTE\n",
    "sm = SMOTE(random_state = 42, sampling_strategy = 1.0)\n",
    "X_dep_train, y_dep_train = sm.fit_resample(X_dep_train, y_dep_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "c677dac3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import SMOTE\n",
    "sm = SMOTE(random_state = 42, sampling_strategy = 1.0)\n",
    "X_arr_train, y_arr_train = sm.fit_resample(X_arr_train, y_arr_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f7e9cdcd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    213371\n",
       "1    213371\n",
       "Name: weather, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_dep_train.value_counts() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "acece528",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.metrics import classification_report\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "876a7527",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Random Forest Classifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf=RandomForestClassifier(max_depth = 5, n_estimators=100, random_state = 42)\n",
    "rf.fit(X_arr_train, y_arr_train)\n",
    "rf_y_pred = rf.predict(X_arr_test)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba94a81b",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f'Accuracy score with Random Forest Classifier is {accuracy_score(y_arr_test, rf_y_pred)}.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89508e97",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f'Classification report for Random Forest Classifier is {classification_report(y_arr_test, rf_y_pred )}.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f8bc35d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Logistic Regression\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "lgreg = LogisticRegression()\n",
    "lgreg.fit(X_arr_train, y_arr_train)\n",
    "predlgreg = lgreg.predict(X_arr_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ddd32a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(classification_report(y_arr_test, predlgreg))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3a9bd5b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f'Accuracy score with Logistic Regression is {accuracy_score(y_arr_test, predlgreg)}.')\n",
    "print(f'Classification report {classification_report(y_arr_test, predlgreg)}.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8dd936a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# KNeighbor Classifier\n",
    "def knn(X_train,y_train, X_test, y_test):\n",
    "    from sklearn.neighbors import KNeighborsClassifier\n",
    "    score = {}\n",
    "    for n in range (1,5):\n",
    "        knn = KNeighborsClassifier(n_neighbors = (n))\n",
    "        knn.fit(X_train,y_train)\n",
    "        y_pred_class = knn.predict(X_test)\n",
    "        score[n] = y_pred_class\n",
    "    \n",
    "    return score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7243a2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_score = knn(X_arr_train, y_arr_train, X_arr_test, y_arr_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7383e93e",
   "metadata": {},
   "outputs": [],
   "source": [
    "knn_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9b398ffe",
   "metadata": {},
   "outputs": [],
   "source": [
    "trinket = {}\n",
    "for item in knn_score.items():\n",
    "    trinket[item[0]] = accuracy_score(y_arr_test, item[1][1])\n",
    "max_score = max(trinket.values())\n",
    "best_n = max(trinket, key=trinket.get)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc2aeaf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f'{best_n} makes the best n value with a score of {max_score}.')\n",
    "print(f'Classification report for KNeighbors Classifier {classification_report(y_arr_test, knn_score[best_n][1])}.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d84a07d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Decision Tree Classifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "DTC = DecisionTreeClassifier(criterion = 'gini', random_state = 42, max_depth = 3, min_samples_leaf=5)\n",
    "DTC.fit(X_arr_train, y_arr_train)\n",
    "DTC_y_predict = DTC.predict(X_arr_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7eef93d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f'Accuracy score with Decision Tree Classifier is {accuracy_score(y_arr_test, DTC_y_predict)}.')\n",
    "print(f' Classification Reoprt for Decision Tree Classifier {classification_report(y_arr_test, DTC_y_predict)}.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08ca8cd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Support Vector Classifier\n",
    "from sklearn.svm import SVC\n",
    "svc = SVC(kernel = 'linear', C= 1.0)\n",
    "svc.fit(X_arr_train, y_arr_train)\n",
    "svc_pred = svc.predict(y_arr_test)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5396246c",
   "metadata": {},
   "outputs": [],
   "source": [
    "svc_score = svc.score(X_arr_train, y_arr_train)\n",
    "cv_svc(svc, X_arr_train, y_arr_train, cv = 10)\n",
    "cr_svc= classification_report(y_arr_test, svc_pred))\n",
    "svc_accuracy_score= accuracy_score(y_arr_test,svc_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "656fefb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Naive Bayes Gaussian NB\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "gaussian = GaussianNB()\n",
    "gaussian.fit(X_arr_train, y_arr_train)\n",
    "gaus_pred = gaussian.predict(X_arr_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e071593d",
   "metadata": {},
   "outputs": [],
   "source": [
    "gaus_accuracy = accuracy_score(y_arr_test, gaus_pred)\n",
    "gaus_class = classification_report(y_arr_test, gaus_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f225edb",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f' Naiv Bayes Gaussian has an accuracy score of {gaus_accuracy}.')\n",
    "print(f' Naiv Bayes Gausssian confidence report is {gaus_class}.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "767bdb58",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Naive Bayes Multinomial\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "multinomial = MultinomialNB()\n",
    "multinomial.fit(X_arr_train, y_arr_train)\n",
    "multi_pred = multinomial.predict(X_arr_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e4a8c5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "multi_accuracy = accuracy_score(y_arr_test, multi_pred)\n",
    "multi_class = classication_report(y_arr_test, multi_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "412a0197",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f' Naiv Bayes Multinomial has an accuracy score of {multi_accuracy}.')\n",
    "print(f' Naiv Bayes Multinomial confidence report is {multi_class}.')"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3.9 (XPython)",
   "language": "python",
   "name": "xpython"
  },
  "language_info": {
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
